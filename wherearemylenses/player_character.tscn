[gd_scene load_steps=29 format=3 uid="uid://67axyi1xr1bu"]

[ext_resource type="AudioStream" uid="uid://cjfdo2y2uvdnd" path="res://Assets/_SoundFiles/Breathing/Inhale1.wav" id="1_7hkol"]
[ext_resource type="AudioStream" uid="uid://ngx0lcy5tkva" path="res://Assets/_SoundFiles/Breathing/Inhale2.wav" id="2_lsj7d"]
[ext_resource type="AudioStream" uid="uid://p3qg5e0to3sg" path="res://Assets/_SoundFiles/Breathing/Inhale3.wav" id="3_4kw60"]
[ext_resource type="AudioStream" uid="uid://c0bw0nybpc1vg" path="res://Assets/_SoundFiles/Breathing/Exhale1.wav" id="4_f8x02"]
[ext_resource type="AudioStream" uid="uid://cl068m0bioshk" path="res://Assets/_SoundFiles/Breathing/Exhale2.wav" id="5_rbn80"]
[ext_resource type="AudioStream" uid="uid://clsl730c22tbq" path="res://Assets/_SoundFiles/Breathing/Exhale3.wav" id="6_1qkdv"]
[ext_resource type="AudioStream" uid="uid://cygw0d7qxi44k" path="res://Assets/_SoundFiles/Atmo/UnderwaterAtmoV1.wav" id="7_ekkdk"]
[ext_resource type="Texture2D" uid="uid://0drmvr2kc0m" path="res://Assets/ParticleAssets/BubbleParticle.png" id="7_ryqxq"]
[ext_resource type="AudioStream" uid="uid://dtb28h3gfqio2" path="res://Assets/_SoundFiles/JacketIO/JacketIn.wav" id="8_v6emp"]
[ext_resource type="AudioStream" uid="uid://mmkidyqpm1w6" path="res://Assets/_SoundFiles/JacketIO/JacketOut.wav" id="9_mslv8"]

[sub_resource type="GDScript" id="GDScript_25k6p"]
script/source = "extends CharacterBody3D


var block_input := false

# 0. - 1.
var lungs_filled := 0.
var jacket_filled := .5

@export var JACKET_FILL_RATE := .5
@export var JACKET_EMPTY_RATE := .5
const JACKET_LUNGS_WEIGHT := 3.5
@export var FALLSPEED := 1.

@export var SWIM_SPEED_FORWARD := 0.5
const SWIM_SPEED_BACKWARD := .1
const WATER_RESISTANCE := 1.18

@export var MOUSE_SENSITIVITY := 0.005
@export var MOUSE_ACCELERATION := 50.

const BREATHING_SPEED := 1.25


var rotation_target_player : float

func await_game_over() -> void:
	block_input = true
	$AwaitGameOverTimer.start()

func _ready():
	add_to_group(\"character\")
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED


func _input(p_event: InputEvent) -> void:
	if block_input:
		return

	if p_event is InputEventMouseMotion && Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
		rotation.y -= p_event.relative.x * MOUSE_SENSITIVITY
		$Camera3D.rotation.x -= p_event.relative.y * MOUSE_SENSITIVITY
		
	# TODO: Check for breathing (in/out) and block breathing in once the tank is empty!

	if p_event.is_action_pressed(\"breathe_in\"):
		if lungs_filled < 1. and $StateManagerNode3D.tank_pressure > 0.:
			lungs_filled = minf(lungs_filled + BREATHING_SPEED * get_process_delta_time(), 1.)

			var any_inhale_players_playing := false
			for inhale_player in $AudioStreamPlayersNode/BreathPlayersNode/InhalePlayersNode.get_children():
				var cast_to_inhale_player := inhale_player as AudioStreamPlayer
				if cast_to_inhale_player and cast_to_inhale_player.playing:
					any_inhale_players_playing = true
					break
			if not any_inhale_players_playing:
				var cast_to_random_inhale_player := $AudioStreamPlayersNode/BreathPlayersNode/InhalePlayersNode.get_children().pick_random() as AudioStreamPlayer
				if cast_to_random_inhale_player:
					cast_to_random_inhale_player.play()
		return
	if p_event.is_action_pressed(\"breathe_out\"):
		if lungs_filled > 0.:
			lungs_filled = maxf(lungs_filled - BREATHING_SPEED * get_process_delta_time(), 0.)

			var any_exhale_player_playing := false
			for exhale_player in $AudioStreamPlayersNode/BreathPlayersNode/ExhalePlayersNode.get_children():
				var cast_to_exhale_player := exhale_player as AudioStreamPlayer
				if cast_to_exhale_player and cast_to_exhale_player.playing:
					any_exhale_player_playing = true
					break
			if not any_exhale_player_playing:
				var cast_to_random_exhale_player := $AudioStreamPlayersNode/BreathPlayersNode/ExhalePlayersNode.get_children().pick_random() as AudioStreamPlayer
				if cast_to_random_exhale_player:
					cast_to_random_exhale_player.play()
		return

func _process(p_delta: float) -> void:
	var global_forward_vector := Vector3.FORWARD.rotated(Vector3(0., 1., 0.), rotation.y)
	if not global_forward_vector.is_zero_approx():
		global_forward_vector = global_forward_vector.normalized()
	
	if Input.is_action_pressed(\"forward\"):
		velocity += global_forward_vector * SWIM_SPEED_FORWARD
	elif Input.is_action_pressed(\"backward\"):
		velocity -= global_forward_vector * SWIM_SPEED_BACKWARD

	velocity /= WATER_RESISTANCE


	if Input.is_action_pressed(\"jacket_up\") and not Input.is_action_pressed(\"jacket_down\") and jacket_filled < 1.:
		jacket_filled = minf(jacket_filled + p_delta * JACKET_FILL_RATE, 1.)
		if $AudioStreamPlayersNode/JacketPlayersNode/JacketInPlayer.stream and not $AudioStreamPlayersNode/JacketPlayersNode/JacketInPlayer.playing:
			$AudioStreamPlayersNode/JacketPlayersNode/JacketInPlayer.play()
	elif Input.is_action_pressed(\"jacket_down\") and not Input.is_action_pressed(\"jacket_up\") and jacket_filled > 0.:
		jacket_filled = maxf(jacket_filled - p_delta * JACKET_EMPTY_RATE, 0.)
		if $AudioStreamPlayersNode/JacketPlayersNode/JacketOutPlayer.stream and not $AudioStreamPlayersNode/JacketPlayersNode/JacketOutPlayer.playing:
			$AudioStreamPlayersNode/JacketPlayersNode/JacketOutPlayer.play()
	else:
		$AudioStreamPlayersNode/JacketPlayersNode/JacketInPlayer.stop()
		$AudioStreamPlayersNode/JacketPlayersNode/JacketOutPlayer.stop()


func _physics_process(p_delta: float) -> void:
	velocity.y = (lungs_filled + jacket_filled * JACKET_LUNGS_WEIGHT) - (1. + JACKET_LUNGS_WEIGHT) / 2.
	velocity.y *= FALLSPEED
	move_and_slide()


# TODO: Make this boi unload world.tscn and open a game over menu!
func _on_await_game_over_timer_timeout() -> void:
	queue_free()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_xk0f7"]

[sub_resource type="GDScript" id="GDScript_p4012"]
script/source = "extends Camera3D


var rotation_amplitude := 0.
var time_passed := 0.

const ROTATION_SPEED := 1.


#func _process(p_delta: float) -> void:
	#time_passed += p_delta
#
	#rotation_amplitude = $\"..\".velocity.length() / 10.
	#rotation_amplitude = clampf(rotation_amplitude, 0., 1.)
#
	#rotation.z = sin(time_passed * ROTATION_SPEED) * rotation_amplitude
"

[sub_resource type="GDScript" id="GDScript_cqw7g"]
script/source = "extends Sprite2D


var tex_bubbles_none = load(\"res://Assets/Player_RightHand/PlayerRightHand_1_Clean_Open.png\")
var tex_bubbles_few = load(\"res://Assets/Player_RightHand/PlayerRightHand_2_Decomp_Few.png\")
var tex_bubbles_many = load(\"res://Assets/Player_RightHand/PlayerRightHand_2_Decomp_Few.png\") # placeholder
var tex_bubbles_all = load(\"res://Assets/Player_RightHand/PlayerRightHand_2_Decomp_Few.png\") # placeholder

enum Bubbles
{
	BUBBLES_NONE = 0,
	BUBBLES_FEW = 1,
	BUBBLES_MANY = 2,
	BUBBLES_ALL = 3,
}


func _ready() -> void:
	texture = tex_bubbles_none


func set_bubbles_state(p_bubbles: Bubbles) -> void:
	if p_bubbles == Bubbles.BUBBLES_NONE and tex_bubbles_none:
		texture = tex_bubbles_none
		return
	if p_bubbles == Bubbles.BUBBLES_FEW and tex_bubbles_few:
		texture = tex_bubbles_few
		return
	if p_bubbles == Bubbles.BUBBLES_MANY and tex_bubbles_many:
		texture = tex_bubbles_many
		return
	if p_bubbles == Bubbles.BUBBLES_ALL and tex_bubbles_all:
		texture = tex_bubbles_all
		$\"../../AwaitGameOverTimer\".start
		return
	printerr(\"Passed set_bubbles_state an invalid argument or texture is invalid!\")
"

[sub_resource type="GDScript" id="GDScript_d3jor"]
script/source = "extends Sprite2D

var tex_barometer_clean := load(\"res://Assets/Player_LeftHand/Player_LeftHand_1_Clean.png\")
var tex_barometer_cursed := load(\"res://Assets/Player_Meter/Meter_2_Cursed.png\")

var tex_needle := load(\"res://Assets/Player_Meter/Meter_Needle.png\")

@onready var offscreen_position := get_position()
var onscreen_position = Vector2(120., 475.)

var position_tween : Tween = null


const FADEIN_DURATION := .5
const FADEOUT_DURATION := .5


func _ready() -> void:
	texture = tex_barometer_clean

func _process(p_delta: float) -> void:
	pass

func _input(p_event: InputEvent) -> void:
	if p_event.is_action_pressed(\"finimeter_visibility\"):
		if position_tween:
			position_tween.kill()
			position_tween = null
		position_tween = create_tween()
		position_tween.tween_property(self, \"position\", onscreen_position, FADEIN_DURATION)
		return
	if p_event.is_action_released(\"finimeter_visibility\"):
		if position_tween:
			position_tween.kill()
			position_tween = null
		position_tween = create_tween()
		position_tween.tween_property(self, \"position\", offscreen_position, FADEOUT_DURATION)
		return
"

[sub_resource type="GDScript" id="GDScript_j4p65"]
script/source = "extends Sprite2D


var tex_needle := load(\"res://Assets/Player_Meter/Meter_Needle_V2.png\")


func _ready() -> void:
	texture = tex_needle

func set_needle(p_value: float) -> void:
	rotation = clampf(p_value, 0., 1.) * PI - PI / 2.
"

[sub_resource type="QuadMesh" id="QuadMesh_mnx5b"]
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="GDScript" id="GDScript_rr2cc"]
script/source = "extends Node3D


var tank_pressure := MAX_TANK_PRESSURE

var nitrogen_saturation := 0.

const MAX_TANK_PRESSURE := 200.

const NITROGEN_SATURATION_RATE := 1. # This value is a factor for the nitrogen_saturation increase/decrease.
const MAX_NITROGEN_EXCESS := 24. # This valua is used to check for decompression sickness.
const MAX_NITROGEN_SATURATION := 100. # nitrogen_saturation > MAX_NITROGEN_SATURATION leads to max depth_intoxication.

func _process(p_delta: float) -> void:
	tank_pressure -= p_delta * 5.
	$\"../Camera3D/CanvasLayer/ArmLeftSprite2D/NeedleSprite2D\".set_needle(tank_pressure / MAX_TANK_PRESSURE)

	nitrogen_saturation = lerp(nitrogen_saturation, global_position.z, p_delta * NITROGEN_SATURATION_RATE)

	var depth_intoxication := nitrogen_saturation / MAX_NITROGEN_SATURATION
	if randf() < depth_intoxication:
		do_something_cursed()

	var bubbles_state := int(minf(global_position.z - nitrogen_saturation, 0.) / MAX_NITROGEN_EXCESS)
	$\"../Camera3D/CanvasLayer/ArmRightSprite2D\".set_bubbles_state(bubbles_state)

	if bubbles_state >= 3:
		$\"..\".await_game_over()

# This function shall select a 
func do_something_cursed() -> void:
	pass
"

[sub_resource type="GDScript" id="GDScript_4vrav"]
script/source = "extends AudioStreamPlayer


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass


func _on_finished() -> void:
	play()
"

[sub_resource type="Gradient" id="Gradient_e6npd"]
offsets = PackedFloat32Array(0, 0.333333)
colors = PackedColorArray(0, 0, 0, 0.0156863, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_5qmlk"]
gradient = SubResource("Gradient_e6npd")

[sub_resource type="Curve" id="Curve_nr7uf"]
max_value = 50.0
_data = [Vector2(0, 50), 0.0, 0.0, 0, 0, Vector2(1, 0), -114.849, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_d26fb"]
curve = SubResource("Curve_nr7uf")

[sub_resource type="Curve" id="Curve_fa2ft"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0.339424), -2.69055, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_e2b0i"]
curve = SubResource("Curve_fa2ft")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_xxm07"]
emission_shape = 3
emission_box_extents = Vector3(50, 50, 50)
initial_velocity_min = 1.0
initial_velocity_max = 2.0
angular_velocity_min = 30.0
angular_velocity_max = 60.0
gravity = Vector3(0, 0, 0)
scale_curve = SubResource("CurveTexture_e2b0i")
color_ramp = SubResource("GradientTexture1D_5qmlk")
emission_curve = SubResource("CurveTexture_d26fb")
turbulence_enabled = true
turbulence_noise_scale = 5.053
collision_mode = 1
collision_friction = 0.0
collision_bounce = 0.07

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_vdx0s"]
transparency = 1
vertex_color_use_as_albedo = true
albedo_texture = ExtResource("7_ryqxq")
billboard_mode = 3
billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false

[sub_resource type="QuadMesh" id="QuadMesh_rp6hd"]
material = SubResource("StandardMaterial3D_vdx0s")

[node name="PlayerCharacter" type="CharacterBody3D"]
motion_mode = 1
script = SubResource("GDScript_25k6p")
JACKET_FILL_RATE = 20.0
JACKET_EMPTY_RATE = 100.0
FALLSPEED = 10.0
SWIM_SPEED_FORWARD = 5.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0)
shape = SubResource("CapsuleShape3D_xk0f7")

[node name="Camera3D" type="Camera3D" parent="."]
script = SubResource("GDScript_p4012")

[node name="CanvasLayer" type="CanvasLayer" parent="Camera3D"]

[node name="ArmRightSprite2D" type="Sprite2D" parent="Camera3D/CanvasLayer"]
position = Vector2(1050, 475)
scale = Vector2(0.375, 0.375)
script = SubResource("GDScript_cqw7g")

[node name="ArmLeftSprite2D" type="Sprite2D" parent="Camera3D/CanvasLayer"]
position = Vector2(120, 950)
scale = Vector2(0.375, 0.375)
script = SubResource("GDScript_d3jor")

[node name="NeedleSprite2D" type="Sprite2D" parent="Camera3D/CanvasLayer/ArmLeftSprite2D"]
position = Vector2(16, -72)
script = SubResource("GDScript_j4p65")

[node name="SpotLight3D" type="SpotLight3D" parent="Camera3D"]
spot_range = 39.832
spot_angle_attenuation = 1.23114

[node name="MeshInstance3D" type="MeshInstance3D" parent="Camera3D"]
transform = Transform3D(-0.99973, 0, -0.0232456, 0, 1, 0, 0.0232456, 0, -0.99973, 0, 0, -0.206137)
visible = false
mesh = SubResource("QuadMesh_mnx5b")

[node name="AwaitGameOverTimer" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[node name="StateManagerNode3D" type="Node3D" parent="."]
script = SubResource("GDScript_rr2cc")

[node name="AudioStreamPlayersNode" type="Node" parent="."]

[node name="BreathPlayersNode" type="Node" parent="AudioStreamPlayersNode"]

[node name="InhalePlayersNode" type="Node" parent="AudioStreamPlayersNode/BreathPlayersNode"]

[node name="Inhale0AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/InhalePlayersNode"]
stream = ExtResource("1_7hkol")

[node name="Inhale1AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/InhalePlayersNode"]
stream = ExtResource("2_lsj7d")

[node name="Inhale2AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/InhalePlayersNode"]
stream = ExtResource("3_4kw60")

[node name="ExhalePlayersNode" type="Node" parent="AudioStreamPlayersNode/BreathPlayersNode"]

[node name="Exhale0AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/ExhalePlayersNode"]
stream = ExtResource("4_f8x02")

[node name="Exhale1AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/ExhalePlayersNode"]
stream = ExtResource("5_rbn80")

[node name="Exhale2AudioStreamPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/BreathPlayersNode/ExhalePlayersNode"]
stream = ExtResource("6_1qkdv")

[node name="AtmoPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode"]
stream = ExtResource("7_ekkdk")
volume_db = -3.0
autoplay = true
script = SubResource("GDScript_4vrav")

[node name="JacketPlayersNode" type="Node" parent="AudioStreamPlayersNode"]

[node name="JacketInPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/JacketPlayersNode"]
stream = ExtResource("8_v6emp")

[node name="JacketOutPlayer" type="AudioStreamPlayer" parent="AudioStreamPlayersNode/JacketPlayersNode"]
stream = ExtResource("9_mslv8")

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
amount = 800
lifetime = 10.0
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_xxm07")
draw_pass_1 = SubResource("QuadMesh_rp6hd")

[connection signal="timeout" from="AwaitGameOverTimer" to="." method="_on_await_game_over_timer_timeout"]
[connection signal="finished" from="AudioStreamPlayersNode/AtmoPlayer" to="AudioStreamPlayersNode/AtmoPlayer" method="_on_finished"]
